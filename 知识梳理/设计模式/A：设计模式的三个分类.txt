创建型模式：对象实例化的模式，创建型模式解耦了对象的实例化过程

简单工厂：一个工厂类根据传入的参量决定创建出哪一种产品类的实例
工厂方法：定义一个创建对象的接口，让子类决定实例化哪一个类
抽象工厂：创建相关或依赖对象的家族，而无需明确指定具体类
单例模式：某个类只能有一个实例，提供一个全局访问点
生成器模式：封装一个复杂对象的构建过程，并可以按步骤构造
原型模式：通过复制现有的实例来创建新的实例

结构型模式：把类或对象结合在一起形成更大的结构

适配器模式：将一个类的方法接口转换成客户希望的另外一个接口
组合模式：将对象组合成树形结构以表示“部分-整体”的层次结构
装饰模式：动态地给对象添加新的功能
代理模式：为其他对象提供一个代理以控制对这个对象的访问
蝇量模式：通过共享技术有效地支持大量细粒度的对象
外观模式：提供统一的方法来访问子系统的一群接口
桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化

行为型模式：类和对象如何交互，及划分责任和算法

模板模式：定义一个算法结构，而将一些步骤延迟到子类中实现
解释器模式：给定一个语言， 定义它的文法的一种表示，并定义一个解释器
策略模式：定义一系列的算法，把它们封装起来， 并且使它们可相互替换
状态模式：允许一个对象在其内部状态改变时改变它的行为
观测者模式：对象间的一对多的依赖关系
备忘录模式：在不破坏封装性的前提下，保存对象的内部状态
中介者模式：用一个中介对象来封装一系列的对象交互
命令模式：将命令请求封装为一个对象，使得可用不同的请求来进行参数化