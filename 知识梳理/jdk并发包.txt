ReentrantLock：
可重入：多次加锁多次释放（次数要相同）。
可中断：可通过守护线程检查死锁，interrupt中断其中一条线程可以解锁。
可限时：tryLock()，规定时间内拿不到锁就失败。（unlock前通过lock.isHeldByCurrentThread()判断）
公平锁：构造方法传true，先到先拿锁，性能比非公平锁差（因为自己要处理排队的问题）。

ReentrantLock实现？
应用层实现：CAS状态、等待队列、park()

Semaphore信号量？
acquire(),release()

ReadWriteLock？读写分离锁, 可以大幅提升系统并行度。
读-读不互斥：读读之间不阻塞。
读-写互斥：读阻塞写，写也会阻塞读。
写-写互斥：写写阻塞。

CountDownLatch倒数计时器？  
await(),countDown()方法

CyclicBarrier循环栅栏？
cyclic构造方法里传数字N和runnable，runnable在每次数字满N时调用一次；（runnable可以为null，表示没有动作，只实行计N操作）
生成真正的任务把cyclic对象传入，在run方法里cyclic.await()，等N个任务都await时，调用一次cyclic里的run方法，再进行await后的任务；
每次await计次数满后重新开始计N的次数，每满一次N都调用一次cyclic的run。

LockSupport？  
LockSupport.park(),LockSupport.unpark(t1)
和suspend(线程挂起)、resume有点像，但是不容易引起线程冻结。(suspend不建议使用)
而且就算unpark发生在park之前，线程也不会永久被挂起。
park能够响应中断但不抛出异常，中断响应的结果是park()函数的返回。可以从Thread.interrupted()得到中断标志。